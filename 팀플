let s;
let scl = 20;
let food;
let playfield = 600;
let obstacles = []; // 장애물 배열

function setup() {
  createCanvas(playfield, 640);
  background(51);
  s = new Snake();
  frameRate(10);
  pickLocation();
  generateObstacles(); // 장애물 생성
}

function draw() {
  background(51);
  scoreboard();
  if (s.eat(food)) {
    pickLocation();
  }
  s.death();
  s.update();
  s.show();

  fill(255, 0, 100);
  rect(food.x, food.y, scl, scl);

  // 장애물 그리기
  for (let i = 0; i < obstacles.length; i++) {
    fill(255, 0, 0);
    rect(obstacles[i].x, obstacles[i].y, scl, scl);
  }
}

function pickLocation() {
  let cols = floor(playfield / scl);
  let rows = floor(playfield / scl);
  food = createVector(floor(random(cols)), floor(random(rows)));
  food.mult(scl);

  for (let i = 0; i < s.tail.length; i++) {
    let pos = s.tail[i];
    let d = dist(food.x, food.y, pos.x, pos.y);
    if (d < 1) {
      pickLocation();
    }
  }
}

function generateObstacles() {
  // 중앙에 큰 십자가 모양의 장애물 생성
  let centerX = playfield / 2;
  let centerY = playfield / 2;
  let crossLength = 200;

  // 수평선 생성
  for (let x = centerX - crossLength / 2; x <= centerX + crossLength / 2; x += scl) {
    let obstacle = createVector(x, centerY);
    obstacles.push(obstacle);
  }

  // 수직선 생성
  for (let y = centerY - crossLength / 2; y <= centerY + crossLength / 2; y += scl) {
    if (y !== centerY) { // 가운데 선은 이미 수평선에서 생성했으므로 제외
      let obstacle = createVector(centerX, y);
      obstacles.push(obstacle);
    }
  }
}

function scoreboard() {
  fill(0);
  rect(0, 600, 600, 40);
  fill(255);
  textFont("Georgia");
  textSize(18);
  text("Score: ", 10, 625);
  text("Highscore: ", 450, 625);
  text(s.score, 70, 625);
  text(s.highscore, 540, 625);
}

function keyPressed() {
  if (keyCode === UP_ARROW) {
    s.dir(0, -1);
  } else if (keyCode === DOWN_ARROW) {
    s.dir(0, 1);
  } else if (keyCode === RIGHT_ARROW) {
    s.dir(1, 0);
  } else if (keyCode === LEFT_ARROW) {
    s.dir(-1, 0);
  }
}

function gameOver() {
  background(255);
  fill(0);
  textAlign(CENTER);
  textSize(32);
  text("게임 종료", width / 2, height / 2 - 50);
  textSize(24);
  text("점수: " + s.score, width / 2, height / 2);
  text("최고 점수: " + s.highscore, width / 2, height / 2 + 30);
  noLoop();
}

function Snake() {
  this.x = 0;
  this.y = 0;
  this.xspeed = 1;
  this.yspeed = 0;
  this.total = 0;
  this.tail = [];
  this.score = 1;
  this.highscore = 1;

  this.dir = function (x, y) {
    this.xspeed = x;
    this.yspeed = y;
  };

  this.eat = function (pos) {
    let d = dist(this.x, this.y, pos.x, pos.y);
    if (d < 1) {
      this.total++;
      this.score++;
      text(this.score, 70, 625);
      if (this.score > this.highscore) {
        this.highscore = this.score;
      }
      text(this.highscore, 540, 625);
      return true;
    } else {
      return false;
    }
  };

  this.death = function () {
    for (let i = 0; i < this.tail.length; i++) {
      let pos = this.tail[i];
      let d = dist(this.x, this.y, pos.x, pos.y);
      if (d < 1) {
        this.total = 0;
        this.score = 0;
        this.tail = [];
        gameOver();
      }
    }

    // Snake가 십자가 모양의 장애물과 충돌하는지 확인
    for (let i = 0; i < obstacles.length; i++) {
      let obstacle = obstacles[i];
      let d = dist(this.x, this.y, obstacle.x, obstacle.y);
      if (d < 1) {
        this.total = 0;
        this.score = 0;
        this.tail = [];
        gameOver();
      }
    }
  };

  this.update = function () {
    if (this.total === this.tail.length) {
      for (let i = 0; i < this.tail.length - 1; i++) {
        this.tail[i] = this.tail[i + 1];
      }
    }
    this.tail[this.total - 1] = createVector(this.x, this.y);

    this.x = this.x + this.xspeed * scl;
    this.y = this.y + this.yspeed * scl;

    if (this.x >= playfield || this.x < 0 || this.y >= playfield || this.y < 0) {
      gameOver();
      return;
    }
  };

  this.show = function () {
    fill(255);
    for (let i = 0; i < this.tail.length; i++) {
      rect(this.tail[i].x, this.tail[i].y, scl, scl);
    }

    rect(this.x, this.y, scl, scl);
  };
}
