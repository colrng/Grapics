let scl = 20;
let food;
let speedBoost; // 속도를 증가시키는 아이템
let playfield = 600;
let obstacles = []; // 장애물 배열
let gameStarted = false; // 게임이 시작되었는지 여부를 나타내는 변수
let speedLevel = 5; // 속도 레벨 (기본값은 5)
let speedIncrease = 1; // 속도 증가량

function setup() {
  createCanvas(playfield, 640);
  background(51);
  frameRate(10); // 기본 프레임 속도
  generateObstacles(); // 장애물 생성
  textAlign(CENTER, CENTER);
  textSize(32);
  fill(255);
  text("게임 시작", width / 2, height / 2);
}

function draw() {
  if (gameStarted) {
    background(51);
    scoreboard();
    s.update();
    s.show();

    fill(255, 0, 100);
    rect(food.x, food.y, scl, scl);

    fill(0, 255, 0); // 속도를 증가시키는 아이템 색상 (녹색)
    rect(speedBoost.x, speedBoost.y, scl, scl);

    // 장애물 그리기
    for (let i = 0; i < obstacles.length; i++) {
      fill(255, 0, 0);
      rect(obstacles[i].x, obstacles[i].y, scl, scl);
    }
  }
}

function pickLocation() {
  let cols = floor(playfield / scl);
  let rows = floor(playfield / scl);
  food = createVector(floor(random(cols)), floor(random(rows)));
  food.mult(scl);

  speedBoost = createVector(floor(random(cols)), floor(random(rows)));
  speedBoost.mult(scl);

  for (let i = 0; i < s.tail.length; i++) {
    let pos = s.tail[i];
    let d1 = dist(food.x, food.y, pos.x, pos.y);
    let d2 = dist(speedBoost.x, speedBoost.y, pos.x, pos.y);
    if (d1 < 1 || d2 < 1) {
      pickLocation();
    }
  }
}

function generateObstacles() {
  // 중앙에 큰 십자가 모양의 장애물 생성
  let centerX = playfield / 2;
  let centerY = playfield / 2;
  let crossLength = 200;

  // 수평선 생성
  for (let x = centerX - crossLength / 2; x <= centerX + crossLength / 2; x += scl) {
    let obstacle = createVector(x, centerY);
    obstacles.push(obstacle);
  }

  // 수직선 생성
  for (let y = centerY - crossLength / 2; y <= centerY + crossLength / 2; y += scl) {
    if (y !== centerY) { // 가운데 선은 이미 수평선에서 생성했으므로 제외
      let obstacle = createVector(centerX, y);
      obstacles.push(obstacle);
    }
  }
}

function scoreboard() {
  fill(0);
  rect(0, 600, 600, 40);
  fill(255);
  textFont("Georgia");
  textSize(18);
  text("Score: ", 30, 625);
  text("Highscore: ", 450, 625);
  text(s.score, 70, 625);
  text(s.highscore, 540, 625);

  // 속도를 게임이 시작되기 전에만 표시
  if (!gameStarted) {
    textSize(24);
    fill(255);
    text("선택한 속도: " + speedLevel, width / 2, height / 2 + 50);
  }
}

function startGame() {
  gameStarted = true;
  frameRate(speedLevel); // 선택한 속도로 프레임 속도 설정
  s = new Snake();
  pickLocation();
}

function restartGame() {
  gameStarted = false;
  loop(); // 게임 루프 재시작
  setup(); // 새로운 게임 설정
}

function keyPressed() {
  if (!gameStarted) {
    // 게임이 시작되지 않은 경우 속도를 변경할 수 있도록 설정
    if (keyCode === UP_ARROW) { // UP_ARROW 키를 누른 경우 속도 증가량 증가
      speedLevel = min(speedLevel + 1, 9); // 속도 증가
    } else if (keyCode === DOWN_ARROW) { // DOWN_ARROW 키를 누른 경우 속도 증가량 감소
      speedLevel = max(speedLevel - 1, 1); // 속도 감소
    } else if (keyCode === 69) { // 'e' 키를 누른 경우 게임 시작
      startGame();
    }
    // 속도가 변경되었을 때 속도와 속도 증가량을 다시 표시
    if (!gameStarted) {
      textSize(24);
      fill(255);
      text("선택한 속도: " + speedLevel, width / 2, height / 2 + 50);
    }
  } else {
    // 게임이 시작된 경우에만 Snake의 방향을 변경할 수 있도록 설정
    if (keyCode === UP_ARROW) {
      s.dir(0, -1);
    } else if (keyCode === DOWN_ARROW) {
      s.dir(0, 1);
    } else if (keyCode === RIGHT_ARROW) {
      s.dir(1, 0);
    } else if (keyCode === LEFT_ARROW) {
      s.dir(-1, 0);
    }
  }
}

function gameOver() {
  background(255);
  fill(0);
  textAlign(CENTER);
  textSize(32);
  text("게임 종료", width / 2, height / 2 - 50);
  textSize(24);
  text("점수: " + s.score, width / 2, height / 2);
  text("최고 점수: " + s.highscore, width / 2, height / 2 + 30);
  text("마우스를 클릭하여 재시작하세요", width / 2, height / 2 + 100);
  noLoop();
}

function Snake() {
  this.x = 0;
  this.y = 0;
  this.xspeed = 1;
  this.yspeed = 0;
  this.total = 0;
  this.tail = [];
  this.score = 1;
  this.highscore = 1;

  this.dir = function (x, y) {
    this.xspeed = x;
    this.yspeed = y;
  };

  this.checkBoundaryCollision = function() {
    if (this.x < 0 || this.x >= width || this.y < 0 || this.y >= height) {
      return true;
    } else {
      return false;
    }
  };

  this.checkCollisions = function(pos) {
    let d = dist(this.x, this.y, pos.x, pos.y);
    if (d < 1) {
      return true;
    } else {
      return false;
    }
  };

  this.update = function () {
    // Snake의 위치 업데이트
    this.x += this.xspeed * scl;
    this.y += this.yspeed * scl;

    // 벽과 충돌했을 때 게임 종료
    if (this.checkBoundaryCollision()) {
      this.total = 0;
      this.score = 0;
      this.tail = [];
      gameOver();
    }

    // 아이템을 먹었을 때의 동작
    if (this.checkCollisions(food)) {
      this.total++;
      this.score++;
      pickLocation();
    }

    // 속도를 증가시키는 아이템을 먹었을 때의 동작
    if (this.checkCollisions(speedBoost)) {
      speedLevel += speedIncrease;
      frameRate(speedLevel);
      pickLocation();
    }

    // 장애물과 충돌했을 때의 동작
    for (let i = 0; i < obstacles.length; i++) {
      if (this.checkCollisions(obstacles[i])) {
        this.total = 0;
        this.score = 0;
        this.tail = [];
        gameOver();
      }
    }

    // Snake의 꼬리 길이 조절
    for (let i = 0; i < this.tail.length - 1; i++) {
      this.tail[i] = this.tail[i + 1];
    }
    if (this.total >= 1) {
      this.tail[this.total - 1] = createVector(this.x, this.y);
    }
  };

  this.show = function () {
    // 사용자가 만든 캐릭터 그리기
    drawShinChan();
  };
}

function drawShinChan() {
  // ShinChan 캐릭터 그리기
  push();//얼굴 채우기
  stroke(255,218,185);
  fill(255,218,185);
  rect(s.x, s.y, 65, 60);
  rect(s.x + 40, s.y, 50, 40);
  pop();
  push();//왼쪽 볼, 머리
  stroke(0);
  fill(255,218,185);
  arc(s.x + 45, s.y, 90, 90, PI, 0);
  arc(s.x, s.y + 30, 70, 60, PI/2, PI + PI/2);
  pop();
  push();//머리카락
  noFill();
  strokeWeight(15);
  arc(s.x + 45, s.y, 90, 90, PI * (4.6/4), PI/360);
  pop();

  push();//입 아래쪽 선
  line(s.x, s.y + 60, s.x + 58, s.y + 60);
  pop();
  push();//귀
  stroke(0);
  fill(255,218,185);
  arc(s.x + 90, s.y + 20, 34, 40, PI + PI/2 - 6.6, PI/1.93);
  pop();
  push();//입
  fill(255,0,0);
  ellipse(s.x + 20, s.y + 60, 10, 20);
  pop();
  push();//턱오른쪽
  stroke(0);
  fill(255,218,185);
  arc(s.x + 58, s.y + 40, 60, 40, 0, PI/2);
  pop();
  push();//눈썹
  stroke(50);
  noFill();
  strokeWeight(8);
  bezier(s.x, s.y - 15, s.x + 15, s.y - 30, s.x + 15, s.y - 30, s.x + 30, s.y - 15);
  bezier(s.x + 45, s.y - 15, s.x + 60, s.y - 30, s.x + 60, s.y - 30, s.x + 75, s.y - 15);
  strokeWeight(2);
  bezier(s.x, s.y - 5, s.x + 15, s.y - 15, s.x + 15, s.y - 15, s.x + 30, s.y - 5);
  bezier(s.x + 45, s.y - 5, s.x + 60, s.y - 15, s.x + 60, s.y - 15, s.x + 75, s.y - 5);
  pop();
  push();//눈
  fill(0);
  ellipse(s.x + 20, s.y + 23, 20, 20);
  ellipse(s.x + 53, s.y + 23, 20, 20);
  fill(255);
  ellipse(s.x + 20, s.y + 23, 9, 9);
  ellipse(s.x + 53, s.y + 23, 9, 9);
  pop();
}

function mouseClicked() {
  if (!gameStarted && mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {
    startGame();
  } else if (!gameStarted) {
    // 게임이 시작되지 않은 상태에서 클릭했을 때는 아무 작업도 하지 않음
    return;
  } else {
    restartGame();
  }
}
